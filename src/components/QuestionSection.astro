---

import SearchPanel from "./SearchPanel.astro";
import QuestionList from "./QuestionList.astro";
import {getCollection, type CollectionEntry} from "astro:content";

const allQuestions = await getCollection("questions");

const urlParams = new URLSearchParams(Astro.url.search);
const topic = urlParams.get("topic");
const lang = urlParams.get("lang");
const difficulty = urlParams.get("difficulty");

const filtered = allQuestions.filter((questions: CollectionEntry<"questions">) => {
    const { data } = questions;
    return (!topic || data.topics.includes(topic)) &&
        (!lang || data.langs.includes(lang)) &&
        (!difficulty || data.difficulty === difficulty)
});

const parsedQuestions = filtered.map((question) => {
    const { data } = question;
    return {
        title: data.title,
        slug: question.slug,
        topics: data.topics,
        langs: data.langs,
        difficulty: data.difficulty,
        companies: (data.companies || []),
    };
});
---

<div class="flex flex-col gap-4 p-4" x-data="questionFilter" x-data="questionApp({ questions: parsedQuestions })">
    <SearchPanel />
    <QuestionList questions={parsedQuestions}/>
</div>

<script>
    function questionApp({ questions: [] }) {
        return {
            allQuestions: Alpine.raw({ questions: [] }),
            filters: {
                topic: '',
                lang: '',
                search: ''
            },
            selectedSlug: '',
            get filtered() {
                return this.allQuestions.filter(q =>
                    (!this.filters.topic || q.topics.includes(this.filters.topic)) &&
                    (!this.filters.lang || q.langs.includes(this.filters.lang)) &&
                    q.title.toLowerCase().includes(this.filters.search.toLowerCase())
                );
            },
            select(slug: string) {
                this.selectedSlug = slug;
            }
        }
    }
</script>